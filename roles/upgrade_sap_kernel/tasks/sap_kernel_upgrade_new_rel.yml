---
#   Copyright 2022 IBM Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

###########################################
# Prepare target work dir and ILE libary
############################################

- name: Create work directory {{ upgsapkrn_dir_temp_iletools_extract_managednode }}
  file:
    path: "{{ upgsapkrn_dir_temp_iletools_extract_managednode }}"
    state: directory
    
- name: Check the ILE library
  shell:
    cmd: "system 'CHKOBJ OBJ(SAP_TOOLS) OBJTYPE(*LIB)'|grep CPF9801|cat"
  register: upgsapkrn_sap_tools_exist

- name: Create ILE library
  shell:
    cmd: "system 'CRTLIB LIB(SAP_TOOLS)'"
  when: upgsapkrn_sap_tools_exist.stdout != ""

- name: Clear ILE library
  shell:
    cmd: "system 'CLRLIB LIB(SAP_TOOLS)'"
  when: upgsapkrn_sap_tools_exist.stdout == ""

#########################################################
# Check SAPCAR
#########################################################
# Copy SAPCAR into working directory (e.g. /tmp/apysidkrn).
# The algorithm to search for SAPCAR is very similar to
# role install_saphostagent:
#   1) search in the directory that is given explicitly
#   2) search in the downloads directory
#   3) search in /usr/sap/hostctrl/exe

- name: Check SAPCAR in {{ upgsapkrn_dir_download_managednode }} folder
  ansible.builtin.stat:
    path: "{{ upgsapkrn_dir_download_managednode }}/{{ upgsapkrn_file_sapcar }}"
  register: upgsapkrn_stat_output
  when: upgsapkrn_dir_sapcar_managednode is undefined

- name: Set SAPCAR path variable
  ansible.builtin.set_fact:
    upgsapkrn_dir_sapcar_managednode: "{{ upgsapkrn_dir_download_managednode }}"
  when: ( upgsapkrn_dir_sapcar_managednode is undefined ) and ( upgsapkrn_stat_output.stat.exists == true ) and ( upgsapkrn_stat_output.stat.executable == true )


- name: Check SAPCAR in /usr/sap/hostctrl/exe folder
  ansible.builtin.stat:
    path: "{{ upgsapkrn_dir_sapcar_default_managednode }}/{{ upgsapkrn_file_sapcar }}"
  register: upgsapkrn_stat_output
  when: upgsapkrn_dir_sapcar_managednode is undefined

- name: Set SAPCAR path variable to default
  ansible.builtin.set_fact:
    upgsapkrn_dir_sapcar_managednode: "{{ upgsapkrn_dir_sapcar_default_managednode }}"
  when: ( upgsapkrn_dir_sapcar_managednode is undefined ) and ( upgsapkrn_stat_output.stat.exists == true ) and ( upgsapkrn_stat_output.stat.executable == true )

- name: Terminate if SAPCAR file not found
  fail:
    msg: "Error: {{ upgsapkrn_file_sapcar }} not found in {{ upgsapkrn_dir_download_managednode }} or in {{ upgsapkrn_dir_sapcar_default_managednode }}"
  when: upgsapkrn_dir_sapcar_managednode is undefined
  
- name: Copy SAPCAR into Work-Directory
  copy:
    src: "{{ upgsapkrn_dir_sapcar_managednode }}/{{ upgsapkrn_file_sapcar }}"
    dest: "{{ upgsapkrn_dir_temp_iletools_extract_managednode }}/"
    remote_src: yes
    
#########################################################
# Using SAPCAR to unpack the archive
#########################################################

- name: Change directory to Work Directory
  shell:
    cmd: system "CHGCURDIR DIR('{{ upgsapkrn_dir_temp_iletools_extract_managednode }}')"

- name: Get fully qualified name of  ILE_<nnn>.SAR  or  SAPEXE_<nnn>.SAR  -->  <sar file>
  shell:
    cmd: "ls -d {{ upgsapkrn_dir_download_managednode }}/SAPEXE_*.SAR"
  register: upgsapkrn_file_iletools_sar
  
- name: Using SAPCAR to unpack the archive
  shell:
    cmd: system "CALL QP2SHELL PARM('/QOpenSys/usr/bin/csh' '-c' '{{ upgsapkrn_dir_temp_iletools_extract_managednode }}/{{ upgsapkrn_file_sapcar }} -xvf {{ upgsapkrn_file_iletools_sar.stdout }} iletools ILE_TOOLS;iletools')"

- name: Determining the user concept
  stat:
    path: "/sapmnt/{{ upgsapkrn_input_sap_sid }}/profile/.newuserconcept"
  register: upgsapkrn_stat_output

#########################################################
# Setting the authorization of the objects in SAP_TOOLS
#########################################################
  
- name: Set CLASSICUSERCONCEPT to No
  ansible.builtin.set_fact:
    upgsapkrn_envvar_userconcept: N
  when: upgsapkrn_stat_output.stat.exists == True
  
- name: Set CLASSICUSERCONCEPT to Yes
  ansible.builtin.set_fact:
    upgsapkrn_envvar_userconcept: Y
  when: upgsapkrn_stat_output.stat.exists == False

- name: FIXSAPOWN SID(*NONE) LIB(SAP_TOOLS)
  shell:
    cmd: |
        cat <<EOF | /bin/sh {{ upgsapkrn_dir_temp_script_managednode }}/clwrapper.sh
        MONMSG MSGID(CPF0000)
        ADDENVVAR ENVVAR('QIBM_USE_DESCRIPTOR_STDIO') VALUE('N') REPLACE(*YES)
        ADDENVVAR ENVVAR(CLASSICUSERCONCEPT) VALUE('{{ upgsapkrn_envvar_userconcept }}') REPLACE(*YES)
        ADDLIBLE LIB(SAP_TOOLS)
        SAP_TOOLS/FIXSAPOWN SID(*NONE) LIB(SAP_TOOLS)
        EOF

#########################################################
# Upgrade Kernel
#########################################################

- name: Execute kernel upgrade through mode TESTF
  shell:
    cmd: |
        cat <<EOF | /bin/sh {{ upgsapkrn_dir_temp_script_managednode }}/clwrapper.sh
        MONMSG MSGID(CPF0000)
        ADDENVVAR ENVVAR('QIBM_USE_DESCRIPTOR_STDIO') VALUE('N') REPLACE(*YES)
        ADDENVVAR ENVVAR(CLASSICUSERCONCEPT) VALUE('{{ upgsapkrn_envvar_userconcept }}') REPLACE(*YES)
        ADDLIBLE LIB(SAP_TOOLS)
        SAP_TOOLS/APYSIDKRN SID({{ upgsapkrn_input_sap_sid }}) +
        ARCHIVES('{{ upgsapkrn_dir_download_managednode }}/*') +
        LOGPATH('/sapmnt/{{ upgsapkrn_input_sap_sid }}/patches/log/krnl_upg_new_testf_log_{{ upgsapkrn_timestamp_for_logfile }}') +
        MODE(*TESTF)
        EOF
  register: upgsapkrn_cmd_apysidkrn_testf

- name: Check Success in LOG /sapmnt/{{ upgsapkrn_input_sap_sid }}/patches/log/krnl_upg_new_testf_log_{{ upgsapkrn_timestamp_for_logfile }}"
  shell: "grep 'Process finished successfully' /sapmnt/{{ upgsapkrn_input_sap_sid }}/patches/log/krnl_upg_new_testf_log_{{ upgsapkrn_timestamp_for_logfile }}"
  register: upgsapkrn_log_success_messages

- name: No Success in LOG
  fail:
    msg: "Error: Please check the log file: /sapmnt/{{ upgsapkrn_input_sap_sid }}/patches/log/krnl_upg_new_testf_log_{{ upgsapkrn_timestamp_for_logfile }}"
  when: upgsapkrn_log_success_messages == ""

- name: Display error
  debug:
    msg: "{{ upgsapkrn_cmd_apysidkrn_testf.stderr_lines }}"

- name: Display Output
  debug:
    msg: "{{ upgsapkrn_cmd_apysidkrn_testf.stdout_lines }}"

- name: Execute kernel upgrade through mode FULLY
  shell:
    cmd: |
        cat <<EOF | /bin/sh {{ upgsapkrn_dir_temp_script_managednode }}/clwrapper.sh
        MONMSG MSGID(CPF0000)
        ADDENVVAR ENVVAR('QIBM_USE_DESCRIPTOR_STDIO') VALUE('N') REPLACE(*YES)
        ADDENVVAR ENVVAR(CLASSICUSERCONCEPT) VALUE('{{ upgsapkrn_envvar_userconcept }}') REPLACE(*YES)
        ADDLIBLE LIB(SAP_TOOLS)
        SAP_TOOLS/APYSIDKRN SID({{ upgsapkrn_input_sap_sid }}) +
        ARCHIVES('{{ upgsapkrn_dir_download_managednode }}/*') +
        LOGPATH('/sapmnt/{{ upgsapkrn_input_sap_sid }}/patches/log/krnl_upg_new_fully_log_{{ upgsapkrn_timestamp_for_logfile }}') +
        MODE(*FULLY)
        EOF
  register: upgsapkrn_cmd_apysidkrn_fully

- name: Check Success in LOG /sapmnt/{{ upgsapkrn_input_sap_sid }}/patches/log/krnl_upg_new_fully_log_{{ upgsapkrn_timestamp_for_logfile }}
  shell: "grep 'Process finished successfully' /sapmnt/{{ upgsapkrn_input_sap_sid }}/patches/log/krnl_upg_new_fully_log_{{ upgsapkrn_timestamp_for_logfile }}"
  register: upgsapkrn_log_success_messages

- name: No Success in LOG
  fail:
    msg: "Error: Please check the log file: /sapmnt/{{ upgsapkrn_input_sap_sid }}/patches/log/krnl_upg_new_fully_log_{{ upgsapkrn_timestamp_for_logfile }}"
  when: upgsapkrn_log_success_messages == ""

- name: Display error
  debug:
    msg: "{{ upgsapkrn_cmd_apysidkrn_fully.stderr_lines }}"

- name: Display Output
  debug:
    msg: "{{ upgsapkrn_cmd_apysidkrn_fully.stdout_lines }}"
