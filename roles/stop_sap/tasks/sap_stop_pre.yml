---
#   Copyright 2022 IBM Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

###########################################
# tasks file for sap_stop_pre
###########################################

###########################################
# Check SAP sid
###########################################

- name: Check if stopsap_input_sap_sid variable is provided
  fail:
    msg: "Error: Input parameter stopsap_input_sap_sid is required."
  when:  stopsap_input_sap_sid is undefined

###########################################
# Check SAP Service
###########################################

- name: Search profile name for {{ stopsap_input_sap_sid }} in /usr/sap/sapservices
  shell:  "grep {{ stopsap_input_sap_sid }} /usr/sap/sapservices | grep -v '^ *#' | grep {{ item }} | cut -f2 -d' '"
  loop: "{{ stopsap_ordered_list_instance_types}}"
  register: stopsap_list_sap_services
  when: (stopsap_list_sap_services is undefined) or (stopsap_list_sap_services.stdout == "")

- name: Set variable for SAP service profile
  set_fact:
    stopsap_list_sap_services: "{{ item.stdout }}"
  when: item.changed
  with_items: "{{ stopsap_list_sap_services.results }}"
  
- name: Error if {{ stopsap_input_sap_sid }} was not found in /usr/sap/sapservices
  fail:
    msg: "Error: SAP system {{ stopsap_input_sap_sid }} not found."
  when: stopsap_list_sap_services == ""

- name: Check  sap_nr {{ stopsap_input_sap_instance_nr }}
  shell: "grep {{ stopsap_input_sap_sid }} /usr/sap/sapservices | grep -v '^ *#' | grep {{ stopsap_input_sap_instance_nr }}"
  register: stopsap_check_sap_instance
  failed_when: stopsap_check_sap_instance.rc >= 2
  when: stopsap_input_sap_instance_nr is defined

- name: Error if {{ stopsap_input_sap_instance_nr }} was not found
  fail:
    msg: "Error: Instance {{ stopsap_input_sap_instance_nr }} for {{ stopsap_input_sap_sid  }} does not exist."
  failed_when: stopsap_check_sap_instance.stdout == ""
  when: stopsap_input_sap_instance_nr is defined
  
###########################################
# Check if there is any running service
###########################################
  
- name: Get one instance number from profile name
  shell: grep -w 'SAPSYSTEM'  {{ stopsap_list_sap_services|replace('pf=', '') }}
  register: stopsap_sap_sid_profile_name

- name: Check if SAP instance is active
  shell: "{{ stopsap_dir_sapctrl_managednode }}/sapcontrol -nr {{ stopsap_sap_sid_profile_name.stdout.split()[2] }} -function GetSystemInstanceList | grep {{ ansible_nodename }} | grep -i green | sort -k 5nr | grep {{ stopsap_input_sap_instance_nr | default() }}"
  environment:
    LIBPATH: "{{ stopsap_dir_sapctrl_managednode }}"
  failed_when: stopsap_output_selected_active_instance.rc >= 2
  register: stopsap_output_selected_active_instance
  when: stopsap_input_sap_instance_nr is defined

- name: Fail if SAP Service already stopped for sap_nr
  fail:
    msg: "Error: No running SAP Instances found"
  failed_when: stopsap_output_selected_active_instance.stdout == ""
  when:  stopsap_input_sap_instance_nr is defined

- name: Fail if SAP Service cannot connect for sap_nr
  fail:
    msg: "GetSystemInstanceList Fail: NIECONN_REFUSED (Connection refused)"
  failed_when: stopsap_output_selected_active_instance.stdout_lines == "FAIL"
  when:  stopsap_input_sap_instance_nr is defined
  
- name: Set variable for active SAP instance
  set_fact:
    stopsap_list_instances_to_stop:  "{{ stopsap_output_selected_active_instance.stdout_lines }}"
  when:  stopsap_input_sap_instance_nr is defined
  
- name: Get list of active SAP instances
  shell: "{{ stopsap_dir_sapctrl_managednode }}/sapcontrol -nr {{ stopsap_sap_sid_profile_name.stdout.split()[2] }} -function GetSystemInstanceList | grep -i green | sort -k 5nr"
  environment:
    LIBPATH: "{{ stopsap_dir_sapctrl_managednode }}"
  failed_when: stopsap_output_selected_active_instance.rc >= 2
  register: stopsap_output_selected_active_instance
  when:  stopsap_input_sap_instance_nr is undefined

- name: Set variable for active SAP instance
  set_fact:
    stopsap_list_instances_to_stop:  "{{ stopsap_output_selected_active_instance.stdout_lines }}"
  when:  stopsap_input_sap_instance_nr is undefined
  
- name: Error, if SAP instance is not active
  fail:
    msg: "Error: No SAP instances found for SAP system {{ stopsap_input_sap_sid }}"
  failed_when: stopsap_list_instances_to_stop == ""
  when:  stopsap_input_sap_instance_nr is undefined

- name: Error if connection to sapstartsrv failed
  fail:
    msg: "GetSystemInstanceList Fail: NIECONN_REFUSED (Connection refused)"
  failed_when: stopsap_list_instances_to_stop == "FAIL"
  when:  stopsap_input_sap_instance_nr is undefined

######################################################
# Display SAP stop commands
######################################################

- name: Show stop SAP instance command
  debug:
    msg: "SAP stop command - {{ stopsap_dir_sapctrl_managednode }}/sapcontrol -nr {{ stopsap_sap_sid_profile_name.stdout.split()[2] }} -function InstanceStop {{ item.split()[0]|replace(',', '') }} {{ stopsap_input_sap_instance_nr | default(item.split()[1]|replace(',', '')) }} {{ stopsap_softtimeout }}"
  with_items: "{{ stopsap_list_instances_to_stop }}"
  when:  stopsap_input_sap_instance_nr is defined

- name: Show stop SAP instance command for all instances
  debug:
    msg: "SAP stop command - {{ stopsap_dir_sapctrl_managednode }}/sapcontrol -nr {{ stopsap_sap_sid_profile_name.stdout.split()[2] }} -function InstanceStop {{ item.split()[0]|replace(',', '') }} {{ item.split()[1]|replace(',', '') }} {{ stopsap_softtimeout }}"
  with_items: "{{ stopsap_list_instances_to_stop }}"
  when:  stopsap_input_sap_instance_nr is undefined
